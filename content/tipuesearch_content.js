var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323101 \n 個人網站: https://mdecp2024.github.io/hw-41323101/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一 \n \n 題目二 \n \n 題目三 \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '題目一 \n 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行 \n 題目二 \n 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n \n \n 在程式中，圓形的邊界是通過數學公式判斷的，因此，如何精確地定義圓形的範圍非常重要。當設置不同的圓心或半徑時，可能會需要調整邏輯來確保圓形能正確顯示。 \n 使用 Brython 在網頁上展示 Python 程式設計是非常有趣且具有挑戰性的。可以在網頁中實現更多功能，並會發現網頁開發中的一些技巧和細節，這對編程能力的提升非常有幫助。 \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': 'w12_1 \n \n 這次作業不僅提升了我的 Python 編程能力，還增強了我對網頁開發技術的理解。通過將 JupyterLab 中的 Python 程式碼轉換為可在 Brython 上運行的代碼，我學到了如何設計交互式應用，並熟悉了如何將程式碼嵌入到現代網頁中。 \n \n 第六題:06_list_slicing \n 範例程式: 城市 \n \n 根據索引選取單個或多個元素。 \n 設定步長來篩選間隔元素。 \n 使用負數索引來倒序選取元素。 \n 反轉整個列表。 \n \n \n cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]\nprint(cities) # 輸出所有城市\nprint(cities[1]) # 輸出索引 1 的城市\nprint(cities[1:4]) # 從索引 1 到 3（不包含索引 4）\nprint(cities[1:4:2]) # 從索引 1 到 3，每隔一個元素取一次\nprint(cities[0:3]) # 從索引 0 到 2（不包含索引 3）\nprint(cities[:3]) # 與上面相同，從開始到索引 2（不包含索引 3）\nprint(cities[2:5]) # 從索引 2 到 4（不包含索引 5）\nprint(cities[2:]) # 從索引 2 開始到列表結尾\nprint(cities[0:5:2]) # 從索引 0 到 4，每隔一個元素取一次\nprint(cities[::2]) # 從開始到結尾，每隔一個元素取一次\nprint(cities[4]) # 輸出索引 4 的城市\nprint(cities[-1]) # 輸出最後一個元素（倒數第 1 個）\nprint(cities[-4:-1]) # 切片：從倒數第 4 個到倒數第 2 個（不包含倒數第 1 個）\nprint(cities[3:0:-1]) # 從索引 3 到 1（不包含索引 0）\nprint(cities[-2:-5:-1]) # 從倒數第 2 個到倒數第 5 個\nprint(cities[::-1]) # 將整個列表反轉 \n \n 第七題:07_list_slicing_use \n 範例程式: 列表操作 \n 列表操作（例如合併和插入元素）允許靈活地修改列表內容。 \n 修改列表中的切片會影響原列表的結構。 \n 使用  del  可以刪除列表中的特定元素或整個列表。 \n \n # 定義感官列表\nsenses = ["eyes", "nose", "ears", "tongue", "skin"]\nprint (senses) # 輸出：[\'eyes\', \'nose\', \'ears\', \'tongue\', \'skin\']\n\n# 修改(索引 1)的元素替換為 "smell"\nsenses[1] = "smell"\nprint (senses) # 輸出：[\'eyes\', \'smell\', \'ears\', \'tongue\', \'skin\']\n\n# 修改索引第三和 第四的元素替換為 ["taste", "touch"]，\nsenses[3:5] = ["taste", "touch"]\nprint (senses) # 輸出：[\'eyes\', \'smell\', \'ears\', \'taste\', \'touch\']\n\n# 修改索引第零到第二的元素替換為 ["sight", "hearing"]\nsenses[0:3:2] = ["sight", "hearing"]\nprint (senses) # 輸出：[\'sight\', \'smell\', \'hearing\', \'taste\', \'touch\']\n\n# 定義行星列表\nplanets = ["Mercury", "Mars", "Earth", "Neptune"]\nprint (planets) # 輸出：[\'Mercury\', \'Mars\', \'Earth\', \'Neptune\']\n\n# 向 planets "Jupiter"加入列表中，\nplanets = planets + ["Jupiter"]\nprint (planets) # 輸出：[\'Mercury\', \'Mars\', \'Earth\', \'Neptune\', \'Jupiter\']\n\n# 將 "Venus" 插入到 planets 列表的索引 2 位置\nplanets = planets[0:2] + ["Venus"] + planets[2:5]\nprint (planets) # 輸出：[\'Mercury\', \'Mars\', \'Venus\', \'Earth\', \'Neptune\', \'Jupiter\']\n\n# 在索引 5 位置插入 "Uranus" 和 "Saturn"\nplanets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]\nprint(planets) # 輸出：[\'Mercury\', \'Mars\', \'Venus\', \'Earth\', \'Neptune\', \'Uranus\', \'Saturn\', \'Jupiter\']\n\n# 定義房間列表\nhouse = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]\nprint (house) # 輸出：[\'kitchen\', \'dining room\', \'living room\', \'bedroom\', \'bathoom\', \'garden\', \'balcony\', \'terrace\']\n\n# 刪除索引 1 的元素（\'dining room\'）\ndel house[1]\nprint (house) # 輸出：[\'kitchen\', \'living room\', \'bedroom\', \'bathoom\', \'garden\', \'balcony\', \'terrace\']\n\n# 刪除索引 4 到 5 的元素（\'garden\' 和 \'balcony\'）\ndel house[4:6]\nprint (house) # 輸出：[\'kitchen\', \'living room\', \'bedroom\', \'bathoom\', \'terrace\']\n\n# 刪除步長為 2 的元素（\'kitchen\'，\'bedroom\'，\'terrace\'）\ndel house[::2]\nprint (house) # 輸出：[\'living room\', \'bathoom\']\n\n# 刪除整個 house 列表\ndel house\n\n# 嘗試輸出會引發錯誤，因為 house 列表已被刪除\nprint (house) # NameError: name \'house\' is not \n \n 第八題:08_for_range \n 範例程式: 配對朋友和食物 \n 動態處理更大範圍的清單。 \n 增加錯誤處理（如清單長度不一致）。 \n 整合更靈活的字串處理方式（如使用  zip  或  f-string ）。 \n \n # 定義朋友的名字\nfriends = ["Geetha", "Luca", "Daisy", "Juhan"]\n\n# 定義不同食物\ndishes = ["sushi", "burgers", "tacos", "pizza"]\n\nprint ("My friends\' names are:") # 輸出：(My friends\' names are:)\n\nprint (friends) # 列印friends清單：[\'Geetha\', \'Luca\', \'Daisy\', \'Juhan\']\n\n# 使用for迴圈，變數 index 從 0 到 3（包含 0，不包含 4）\nfor index in range (0,4):\nprint ("index: " + str(index))\nprint ("friend: " + friends[index])\n\n# 列印食物清單\nprint ("Their favorite dishes are:") # 輸出：Their favorite dishes are:\n\nprint (dishes) # 列印dishes清單：[\'sushi\', \'burgers\', \'tacos\', \'pizza\']\n\n# 用迴圈逐一打印每種食物及其索引\nfor index in range (0,4):\nprint ("index: " + str(index))\nprint ("dish: " + dishes[index])\n\n# 配對朋友和食物並打印\nfor index in range (0,4):\nprint ("My friend " + friends[index] + "\'s favorite dish is " + dishes[index]) \n \n 第九題:09_for_loop_if_equals \n 範例程式: 動物 \n 動物清單： 程式列出所有動物及其位置。 \n 特定條件判斷： 當觀察到目標動物時，輸出特別的訊息，強調目標。 \n 靈活性： 清單和  wanted_to_see  都可以改變，程式可適應新的資料。 \n \n # 定義動物清單\nanimals = ["giraffe", "penguin", "dolphin"]\n\nprint (animals) # 輸出：[\'giraffe\', \'penguin\', \'dolphin\']\n\n# 使用for迴圈，變數 i 從 0 遍歷到清單的長度減 1\n# for each position in the list\nfor i in range (0, len(animals)):\nprint ("-- Beginning of loop --")\n# print each element and its position\nprint ("The element in position " + str(i) + " is " + animals[i])\n\n# 定義目標動物\nwanted_to_see = "penguin"\n\n# 使用for迴圈遍歷清單\n# for each position in the list\nfor i in range (0, len(animals)):\n# if the current animal is what you really wanted to see\nif animals[i] == wanted_to_see:\n# print out that that\'s the animal you really wanted to see\nprint ("I saw a " + animals[i] + " and I really wanted to see it!") # 輸出：I saw a <動物> and I really wanted to see it!\n# if the current animal is not what you really wanted to see\nelse:\n# just print out that you saw it\nprint ("I saw a " + animals[i]) # 輸出：I saw a <動物> \n \n \n 第十題:10_for_search \n 範例程式: 配件的名稱長度 \n 清單遍歷與條件篩選： 通過  for  迴圈遍歷配件清單，並使用條件語句來過濾出長度為特定數字的配件，或者根據位置篩選出符合條件的配件。 \n 動態條件設定： 使用變數設定閾值（如長度或位置），使得程式在不同情況下可靈活運作。 \n \n # 輸出每個配件的名稱及其位置\naccessories = ["belt", "hat", "gloves", "sunglasses", "ring"] # 列印每個配件的名稱以及它在清單中的位置\nprint (accessories)\n# for each position in the list\nfor i in range (len(accessories)):\n#print each elements and its position\nprint ("The element " + accessories[i] + " is in position " + str(i))\n\n# 輸出長度為 6 的配件\n# for each position in the list\nfor i in range (len(accessories)):\n# if the length of the element equals 6\nif len(accessories[i]) == 6:\n# print the element, its position, and its number of characters\nprint ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")\n\n# 輸出長度小於 6 的配件\n# for each position in the list\nfor i in range (len(accessories)):\n# if the length of the element is less than 6\nif len(accessories[i]) < 6:\n# print the element, its position, and its number of characters\nprint ("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")\n# defining the threshold\n\n# 輸出長度大於設定閾值 6 的配件\nn_of_characters = 6\n# for each position in the list\nfor i in range (len(accessories)):\n# if the length of the element is greater than the threshold\nif len(accessories[i]) > n_of_characters:\n# print the element, its position, and its number of characters\nprint ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")\n# defining the threshold\n\n# 輸出長度不等於設定閾值的配件\nn_of_characters = 6\n# for each position in the list\nfor i in range (len(accessories)):\n# if the length of the element is not equal to the threshold\nif len(accessories[i]) != n_of_characters:\n# print the element, its position, and its number of characters\nprint ("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))\n# defining the threshold\n\n# 輸出位置小於或等於指定位置 2 的配件\nposition = 2\n# for each position in the list\nfor i in range (len(accessories)):\n# if the position of the element is less then or equal to to the threshold\nif i <= position:\n# print the element, its position, and its position characteristic\nprint ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))\n# defining the threshold\n\n# 輸出位置大於或等於指定位置 2 的配件\nposition = 2\n# for each position in the list\nfor i in range (len(accessories)):\n# if the position of the element is greater then or equal to to the threshold\nif i >= position:\n# print the element, its position, and its position characteristic\nprint ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position)) \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '\n 在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色 \n \n 程式: \n <!-- 導入 brython 程式庫 -->\n<p>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n</p>\n<!-- 啟動 Brython -->\n<p>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n// ]]></script>\n</p>\n<div id="brython_div1"></div>\n<p>\n<script type="text/python3">// <![CDATA[\nfrom browser import html\nfrom browser import document as doc\nimport math\n\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\nctx.lineWidth = 4\n\n# 混色模式設置（以確保透明效果）\nctx.globalCompositeOperation = "source-over"\n\n# 黑邊圓 *2（每個畫四個邊）\nctx.strokeStyle = \'black\'\n# 第一個圓\nctx.beginPath()\nctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)\nctx.fillStyle = "#1E90FF" # DodgerBlue\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)\nctx.fillStyle = "#FF4500" # OrangeRed\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)\nctx.fillStyle = "#32CD32" # LimeGreen\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)\nctx.fillStyle = "#FFFFE0" # LightYellow\nctx.fill()\nctx.stroke()\n\n# 第二個圓\nctx.beginPath()\nctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)\nctx.fillStyle = "#9400D3" # DarkViolet\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)\nctx.fillStyle = "#808000" # Olive\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)\nctx.fillStyle = "#FFA07A" # LightSalmon\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)\nctx.fillStyle = "#FF1493" # DeepPink\nctx.fill()\nctx.stroke()\n\n# 紅方形 *2（4個三角形）\nctx.strokeStyle = \'red\'\nctx.beginPath()\nctx.moveTo(60, 60)\nctx.lineTo(60, 260)\nctx.lineTo(260, 260)\nctx.fillStyle = "#FFD700" # Gold\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(60, 60)\nctx.lineTo(260, 60)\nctx.lineTo(260, 260)\nctx.fillStyle = "#4B0082" # Indigo\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(360, 160)\nctx.lineTo(360, 360)\nctx.fillStyle = "#4682B4" # SteelBlue\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(160, 360)\nctx.lineTo(360, 360)\nctx.fillStyle = "#ADFF2F" # GreenYellow\nctx.fill()\nctx.stroke()\n\n# 重疊的小方形\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(160, 260)\nctx.lineTo(260, 260)\nctx.fillStyle = "#1E90FF" # DodgerBlue\nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(260, 160)\nctx.lineTo(260, 260)\nctx.fillStyle = "#6A5ACD" # SlateBlue\nctx.fill()\nctx.stroke()\n\n# 藍斜線\nctx.strokeStyle = \'blue\'\nctx.beginPath()\nctx.moveTo(60, 60)\nctx.lineTo(260, 260)\nctx.stroke()\n// ]] \n \n \n \n \n 啟動Brython \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n \n 心得: \n HTML5 的 Canvas API 提供了一個靈活的 2D 繪圖工具，可以實現圖形、路徑填充與動畫。但 API 本身有一定的學習曲線，例如理解 arc()、rect() 等方法的參數。這個範例結合了編程、數學和視覺設計的技巧，是一個很好的學習範例。不僅能加深對 Canvas API 的理解，還可以學習如何用程式碼創建清晰的幾何圖形。當然，也讓人意識到程式中的細節處理是成功完成一個視覺效果的關鍵。 \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_hw', 'text': '程式 \n from browser import html\nfrom browser import document as doc\nimport random\n\n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\ncanvas = html.CANVAS(width=canvas_width, height=canvas_height)\nbrython_div = doc[id]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\nreturn canvas, ctx\n\n# 定義一個隨機顏色生成函式\ndef random_color_generator():\nr = random.randint(0, 255)\ng = random.randint(0, 255)\nb = random.randint(0, 255)\nreturn f"rgb({r}, {g}, {b})"\n\n# 判斷點是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\nreturn (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 繪製三個圓並填充區域\ndef draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\ncanvas, ctx = initialize_canvas(400, 400)\nctx.clearRect(0, 0, canvas.width, canvas.height)\n\n# 顏色區域存儲字典\ncolor_dict = {}\n\nfor py in range(0, canvas.height):\nfor px in range(0, canvas.width):\n# 判斷點是否在每個圓內\nin_circle1 = is_point_in_circle(px, py, x1, y1, r1)\nin_circle2 = is_point_in_circle(px, py, x2, y2, r2)\nin_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n\n# 確定區域類型\nif in_circle1 and in_circle2 and in_circle3:\nregion = "intersection_all"\nelif in_circle1 and in_circle2:\nregion = "intersection_1_2"\nelif in_circle1 and in_circle3:\nregion = "intersection_1_3"\nelif in_circle2 and in_circle3:\nregion = "intersection_2_3"\nelif in_circle1:\nregion = "circle1"\nelif in_circle2:\nregion = "circle2"\nelif in_circle3:\nregion = "circle3"\nelse:\nregion = "background"\n\n# 分配顏色\nif region not in color_dict:\ncolor_dict[region] = random_color_generator() if region != "background" else "white"\n\nctx.fillStyle = color_dict[region]\nctx.fillRect(px, py, 1, 1)\n\n# 設定三個圓的參數\nx1, y1, r1 = 150, 200, 100\nx2, y2, r2 = 250, 200, 100\nx3, y3, r3 = 200, 300, 100\n\n# 繪製三個圓並填充\ndraw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3) \n', 'tags': '', 'url': 'w14_hw.html'}, {'title': 'w15_hw', 'text': '題目一: 從 1 累加到 100 \n 設計思考： \n 設計一個函式來計算從  init  到  upto  的整數總和。 使用  for  迴圈遍歷從  init  到  upto  的數字，並將這些數字累加起來。 \n 執行過程： \n \n \n 初始化變數 ：首先設置累加變數  sum = 0 ，並定義  init  和  upto  的值（例如， init = 1  和  upto = 100 ）。 \n \n \n 使用  for  迴圈 ： for i in range(init, upto + 1)  用來遍歷從  init  到  upto （包含  upto ）的所有數字。 \n \n \n 執行累加 ：在迴圈內，將每個數字加到  sum  中，這可以通過  sum = sum + i  完成。 \n \n \n 輸出結果 ：最後，將結果以格式化字符串的方式輸出。 \n \n \n # sum 初始值設為 0\nsum = 0\ninit = 1\nupto = 100\n# 利用 for 重複迴圈與變數加法進行累加\nfor i in range(init, upto+1):\nsum = sum + i\nprint("從" + str(init) + "累加到" + str(upto) + "=" + str(sum)) \n 程式碼解釋： \n \n \n sum = 0 ：初始化  sum  變數為 0，用來儲存累加的總和。 \n \n \n for i in range(init, upto + 1) ：這行程式使用  range  函式來生成一個從  init  到  upto  的數字範圍，並且  range  的結尾是  upto+1 ，以確保包含  upto  本身。 \n \n \n sum = sum + i ：這行將每個遍歷到的數字加到  sum  中。 \n \n \n print("從" + str(init) + "累加到" + str(upto) + "=" + str(sum)) ：最終輸出累加的結果。 \n \n \n 心得： \n \n \n 這段程式碼非常簡單，使用了  for  迴圈來完成累加。每次迴圈會將當前的數字加到總和中，最後輸出結果。 \n \n \n \n 題目二: addto \n 設計思考： \n 設計一個函式，計算從  init  到 upto 的整數總和。 使用 for 迴圈來遍歷 init 到 upto 之間的數字，並進行累加。將結果返回。 \n 執行過程： \n \n \n 定義 \xa0 addto \xa0 函式 ： \n \n \n sum = 0 ：初始化累加總和為 0。 \n \n \n 使用  for i in range(init, upto + 1)  來遍歷範圍內的數字（包括  upto ）。 \n \n \n 將每一個數字加到  sum  上。 \n \n \n 返回累加結果。 \n \n \n \n \n \n \n 呼叫  addto  並輸出結果 ： \n \n 設定  init = 1  和  upto = 100 。 \n 呼叫  addto(init, upto)  函式，並顯示結果。 \n \n \n \n # 定義 addto 函式\ndef addto(init, upto):\nsum = 0\nfor i in range(init, upto+1):\nsum = sum + i\nreturn sum\n\n# 呼叫函式 addto 並輸出結果\ninit = 1\nupto = 100\nresult = addto(init, upto)\nprint("從" + str(init) + "累加到" + str(upto) + "=" + str(result)) \n 程式碼解釋： \n \n \n sum = 0 ：初始化  sum ，用來儲存累加結果。 \n \n \n for i in range(init, upto + 1) ： range(init, upto + 1)  會生成從  init  到  upto  的所有數字。 for  迴圈會遍歷這些數字並執行累加。 \n \n \n sum = sum + i ：每次循環，將當前數字  i  加到  sum  上。 \n \n \n return sum ：返回累加後的結果。 \n \n \n 心得： \n 程式簡單易懂，使用  for  迴圈順利解決問題。這是典型的數字累加問題， range  函式與  sum  累加過程很直觀。 \n \n 題目三: add_only_even \n 設計思考： \n 計算從  init  到  upto  之間所有偶數的總和。 \n 遍歷範圍內的每個數字，判斷是否為偶數。若是偶數，則加總。 \n 執行過程： \n \n \n 定義  add_only_even  函式 ： \n \n \n 初始化  sum = 0 ，用來儲存偶數的總和。 \n \n \n 遍歷範圍內的每個數字，使用  if i % 2 == 0  判斷是否為偶數。 \n \n \n 若是偶數，就將其加到  sum  中。 \n \n \n 返回累加後的結果。 \n \n \n \n \n 呼叫  add_only_even  並輸出結果 ： \n \n \n 設定  init = 1  和  upto = 100 。 \n \n \n 呼叫  add_only_even(init, upto)  函式，並顯示結果 \n \n \n \n \n # 定義 add_only_even 函式\ndef add_only_even(init, upto):\nsum = 0\nfor i in range(init, upto + 1):\nif i % 2 == 0: # 判斷是否為偶數\nsum = sum + i\nreturn sum\n\n# 呼叫函式 add_only_even 並輸出結果\ninit = 1\nupto = 100\nresult = add_only_even(init, upto)\nprint("從" + str(init) + "累加到" + str(upto) + "的偶數總和為=" + str(result)) \n 程式碼解釋： \n \n \n if i % 2 == 0 ：判斷  i  是否為偶數，若是則執行加法。 \n \n \n 其他部分與  addto  函式類似。 \n \n \n 心得： \n \n \n 利用  if i % 2 == 0  判斷偶數非常直觀。程式簡單，且能夠有效過濾非偶數的數字。 \n \n \n 題目四: add_avoid_8 \n 設計思考： \n 計算從  init  到  upto  之間的總和，但避開所有包含數字  8  的整數。 \n 將每個數字轉換為字串，判斷是否包含字符  8 。如果包含，就跳過該數字。 \n 執行過程： \n \n \n 定義  add_avoid_8  函式 ： \n \n \n 初始化  sum = 0 ，用來儲存總和。 \n \n \n 遍歷範圍內的數字，將數字轉換為字串並檢查是否包含字符  \'8\' 。 \n \n \n 若不包含  8 ，則進行累加。 \n \n \n 返回累加後的結果。 \n \n \n \n \n 呼叫  add_avoid_8  並輸出結果 ： \n \n \n 設定  init = 1  和  upto = 100 。 \n \n \n 呼叫  add_avoid_8(init, upto)  函式，並顯示結果。 \n \n \n \n \n # 定義 add_avoid_8 函式\ndef add_avoid_8(init, upto):\nsum = 0\nfor i in range(init, upto + 1):\nif \'8\' not in str(i): # 判斷數字中是否包含 "8"\nsum = sum + i\nreturn sum\n\n# 呼叫函式 add_avoid_8 並輸出結果\ninit = 1\nupto = 100\nresult = add_avoid_8(init, upto)\nprint("從" + str(init) + "累加到" + str(upto) + "，避開包含 \'8\' 的數字，總和為=" + str(result)) \n 程式碼解釋： \n \n \n if \'8\' not in str(i) ：將  i  轉換為字串，並檢查字串中是否包含字符  \'8\' 。如果不包含，則進行累加。 \n \n \n 其他部分與  addto  函式類似。 \n \n \n 心得： \n \n 使用字串方法判斷是否包含  8 ，這種方式簡單且有效，適用於這類過濾問題。 \n \n 題目五: add_avoid_8_and_3\xa0 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  畫布容器  \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n', 'tags': '', 'url': 'w15_hw.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '以 自己的學號最後四碼 作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像 \n 程式 \n from browser import html\nfrom browser import document as doc\n\n# Create canvas and append to the div\ncanvas = html.CANVAS(width = 2000, height = 2000)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\n\n# Set line properties\nctx.lineWidth = 2\nctx.strokeStyle = "black"\n\n# Draw X-axis line\nctx.beginPath()\nctx.moveTo(31, 1) # origin at (31, 1)\nctx.lineTo(88, 1) # end point for the X axis\nctx.stroke()\n\n# Draw Y-axis line\nctx.beginPath()\nctx.moveTo(31, 1) # origin at (31, 1)\nctx.lineTo(31, 95) # end point for the Y axis\nctx.stroke()\n\n# Set font for the labels\nctx.font = "20px Arial"\nctx.fillStyle = "black" # Set text color\n\n# Add labels next to the axes\nctx.fillText("+X", 95, 15) # X axis label, placed to the right of the axis\nctx.fillText("+Y", 31, 105) # Y axis label, placed above the axis\n\n# Display origin point coordinates near the origin inside the axes\nctx.font = "12px Arial"\nctx.fillText("(31, 1)", 40, 15) # Label for the origin, inside the axis area\n\n# Shifted origin point\nx = 31\ny = 1\n\n# Draw orange hexagon\nctx.beginPath()\nctx.fillStyle = "#EBB000"\nctx.moveTo(x + 40, y + 70)\nctx.lineTo(x + 60, y + 40)\nctx.lineTo(x + 90, y + 40)\nctx.lineTo(x + 110, y + 70)\nctx.lineTo(x + 90, y + 100)\nctx.lineTo(x + 60, y + 100)\nctx.closePath()\nctx.fill()\n\n# Draw green diamond\nctx.beginPath()\nctx.fillStyle = "#2CB05F"\nctx.moveTo(x + 130, y + 70)\nctx.lineTo(x + 150, y + 40)\nctx.lineTo(x + 170, y + 70)\nctx.lineTo(x + 150, y + 100)\nctx.closePath()\nctx.fill()\n\n# Draw blue triangle (point on the right side of the diamond, facing downward)\nctx.beginPath()\nctx.fillStyle = "#73B7FF"\nctx.moveTo(x + 174, y + 70) # Vertex on the right side of the diamond\nctx.lineTo(x + 154, y + 100) # Left bottom corner\nctx.lineTo(x + 194, y + 100) # Right bottom corner\nctx.closePath()\nctx.fill()\n\n# Draw pink circle\nctx.beginPath()\nctx.fillStyle = "#FF458C"\nctx.arc(x + 220, y + 70, 20, 0, 2 * 3.14159)\nctx.fill()\n\n# Draw yellow square\nctx.beginPath()\nctx.fillStyle = "#EBDF00"\nctx.rect(x + 260, y + 43, 40, 40)\nctx.fill()\n\n# Draw blue rectangle\nctx.beginPath()\nctx.fillStyle = "#004A99"\nctx.rect(x + 320, y + 53, 60, 20)\nctx.fill() \n \n \n \n \n \n  啟動Brython  \n \n \n \n \n \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'w16_exam2', 'text': '請以 自己的學號最後四碼 作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用\xa0 pixel=2 的藍色直線 ,\xa0 自訂迷宮畫布大小 , 直接在頁面畫出下列圖像 \n 程式 \n \n \n \n \n  啟動Brython  \n \n \n \n \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=300, height=300) # 設定迷宮畫布大小\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 取得 canvas 的繪圖上下文\nctx = canvas.getContext("2d")\n\n# 標示左上方點座標 (31, 1)\nctx.font = "12px Arial"\nctx.fillStyle = "red"\nctx.fillText("(31, 1)", 35, 14)\n\n# 定義黑色線條的屬性\nctx.strokeStyle = "black"\nctx.lineWidth = 2\n\n# 開始繪製迷宮 (座標偏移以 (31, 1) 為起點)\noffset_x = 31\noffset_y = 1\n\n# 繪製迷宮線條\nctx.beginPath()\nctx.moveTo(offset_x + 0, offset_y + 0)\nctx.lineTo(offset_x + 86, offset_y + 0)\nctx.moveTo(offset_x + 0, offset_y + 0)\nctx.lineTo(offset_x + 0, offset_y + 200)\nctx.moveTo(offset_x + 120, offset_y + 0)\nctx.lineTo(offset_x + 200, offset_y + 0)\nctx.moveTo(offset_x + 200, offset_y + 0)\nctx.lineTo(offset_x + 200, offset_y + 200)\nctx.lineTo(offset_x + 120, offset_y + 200)\nctx.moveTo(offset_x + 200, offset_y + 200)\nctx.moveTo(offset_x + 0, offset_y + 200)\nctx.lineTo(offset_x + 86, offset_y + 200)\nctx.moveTo(offset_x + 86, offset_y + 157)\nctx.lineTo(offset_x + 86, offset_y + 200)\nctx.moveTo(offset_x + 86, offset_y + 157)\nctx.lineTo(offset_x + 126, offset_y + 157)\nctx.moveTo(offset_x + 160, offset_y + 120)\nctx.lineTo(offset_x + 160, offset_y + 200)\nctx.moveTo(offset_x + 160, offset_y + 120)\nctx.lineTo(offset_x + 50, offset_y + 120)\nctx.moveTo(offset_x + 50, offset_y + 120)\nctx.lineTo(offset_x + 50, offset_y + 163)\nctx.moveTo(offset_x + 126, offset_y + 80)\nctx.lineTo(offset_x + 126, offset_y + 120)\nctx.moveTo(offset_x + 0, offset_y + 80)\nctx.lineTo(offset_x + 86, offset_y + 80)\nctx.moveTo(offset_x + 86, offset_y + 40)\nctx.lineTo(offset_x + 86, offset_y + 80)\nctx.moveTo(offset_x + 40, offset_y + 40)\nctx.lineTo(offset_x + 160, offset_y + 40)\nctx.moveTo(offset_x + 160, offset_y + 40)\nctx.lineTo(offset_x + 160, offset_y + 83)\nctx.stroke() \n \n \n \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};