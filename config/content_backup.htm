<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323101">https://github.com/mdecp2024/hw-41323101</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323101/content/index.html">https://mdecp2024.github.io/hw-41323101/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/vbDkznlYB1g?si=CSmaeuh2OJStIk1-" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/rUrrZEdlrco?si=4xR-dAWn-2xw2LyZ" title="YouTube video player" width="560"></iframe></p>
<p>題目二</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/EHe3GpYwhZI?si=FgBtAZaO8aVmDMMM" title="YouTube video player" width="560"></iframe></p>
<p>題目三</p>
<p><br/><br/><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/LpYjTtiTbX4?si=gutCiZNvO_xSR9e7" title="YouTube video player" width="560"></iframe></p>
<h3>w11_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/8937094c19c933c5d8175d52045a06a0/raw/f51b699f4eadc2f6296ea24b2643ae246135e4c5/w11-1">題目一</a></p>
<p><span>已知可以用 Python 程式</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a><span>, 或</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a><span>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/8937094c19c933c5d8175d52045a06a0/raw/e8952afb8846c67358d457471657dc450b45d9cd/w11-2">題目二</a></p>
<p><span>已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</span></p>
<p><span><img alt="" height="357" src="/images/螢幕擷取畫面 2024-11-28 151314.png" width="387"/></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/rEnjoOjjYbA?si=Ekg0O87LCZ_JwMet" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe><img alt="" src="/images/index.html"/></p>
<p>在程式中，圓形的邊界是通過數學公式判斷的，因此，如何精確地定義圓形的範圍非常重要。當設置不同的圓心或半徑時，可能會需要調整邏輯來確保圓形能正確顯示。</p>
<p>使用 Brython 在網頁上展示 Python 程式設計是非常有趣且具有挑戰性的。可以在網頁中實現更多功能，並會發現網頁開發中的一些技巧和細節，這對編程能力的提升非常有幫助。</p>
<p></p>
<h3>w12_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/f4f33e6df6288a8409e64c214f332243/raw/f8ff4bdd587e1ca33afdfa4a27b60dea40b5a6a1/w12">w12_1</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/BztnnKtJIsw?si=zfj4bYMyzw9cuACB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<p><span>這次作業不僅提升了我的 Python 編程能力，還增強了我對網頁開發技術的理解。通過將 JupyterLab 中的 Python 程式碼轉換為可在 Brython 上運行的代碼，我學到了如何設計交互式應用，並熟悉了如何將程式碼嵌入到現代網頁中。</span></p>
<p><span>第六題:06_list_slicing</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/b801d502a8116ba25d214ef10034bcc4/raw/6c9588b9961a72d347a0092d9c68a536499547e1/w12%252006_list_slicing">城市</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]
print(cities) # 輸出所有城市
print(cities[1]) # 輸出索引 1 的城市
print(cities[1:4]) # 從索引 1 到 3（不包含索引 4）
print(cities[1:4:2]) # 從索引 1 到 3，每隔一個元素取一次
print(cities[0:3]) # 從索引 0 到 2（不包含索引 3）
print(cities[:3]) # 與上面相同，從開始到索引 2（不包含索引 3）
print(cities[2:5]) # 從索引 2 到 4（不包含索引 5）
print(cities[2:]) # 從索引 2 開始到列表結尾
print(cities[0:5:2]) # 從索引 0 到 4，每隔一個元素取一次
print(cities[::2]) # 從開始到結尾，每隔一個元素取一次
print(cities[4]) # 輸出索引 4 的城市
print(cities[-1]) # 輸出最後一個元素（倒數第 1 個）
print(cities[-4:-1]) # 切片：從倒數第 4 個到倒數第 2 個（不包含倒數第 1 個）
print(cities[3:0:-1]) # 從索引 3 到 1（不包含索引 0）
print(cities[-2:-5:-1]) # 從倒數第 2 個到倒數第 5 個
print(cities[::-1]) # 將整個列表反轉</pre>
<p><span>第七題:07_list_slicing_use</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/0942ce6652e125fcbd4ff63e75ce3ee1/raw/fba5759b043cc79774f9e8449da288683250cde8/w12%252007_list_slicing_use">列表操作</a></span></p>
<p>列表操作（例如合併和插入元素）允許靈活地修改列表內容。</p>
<p>修改列表中的切片會影響原列表的結構。</p>
<p>使用 <code>del</code> 可以刪除列表中的特定元素或整個列表。</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義感官列表
senses = ["eyes", "nose", "ears", "tongue", "skin"]
print (senses) # 輸出：['eyes', 'nose', 'ears', 'tongue', 'skin']

# 修改(索引 1)的元素替換為 "smell"
senses[1] = "smell"
print (senses) # 輸出：['eyes', 'smell', 'ears', 'tongue', 'skin']

# 修改索引第三和 第四的元素替換為 ["taste", "touch"]，
senses[3:5] = ["taste", "touch"]
print (senses) # 輸出：['eyes', 'smell', 'ears', 'taste', 'touch']

# 修改索引第零到第二的元素替換為 ["sight", "hearing"]
senses[0:3:2] = ["sight", "hearing"]
print (senses) # 輸出：['sight', 'smell', 'hearing', 'taste', 'touch']

# 定義行星列表
planets = ["Mercury", "Mars", "Earth", "Neptune"]
print (planets) # 輸出：['Mercury', 'Mars', 'Earth', 'Neptune']

# 向 planets "Jupiter"加入列表中，
planets = planets + ["Jupiter"]
print (planets) # 輸出：['Mercury', 'Mars', 'Earth', 'Neptune', 'Jupiter']

# 將 "Venus" 插入到 planets 列表的索引 2 位置
planets = planets[0:2] + ["Venus"] + planets[2:5]
print (planets) # 輸出：['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Jupiter']

# 在索引 5 位置插入 "Uranus" 和 "Saturn"
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
print(planets) # 輸出：['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Uranus', 'Saturn', 'Jupiter']

# 定義房間列表
house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print (house) # 輸出：['kitchen', 'dining room', 'living room', 'bedroom', 'bathoom', 'garden', 'balcony', 'terrace']

# 刪除索引 1 的元素（'dining room'）
del house[1]
print (house) # 輸出：['kitchen', 'living room', 'bedroom', 'bathoom', 'garden', 'balcony', 'terrace']

# 刪除索引 4 到 5 的元素（'garden' 和 'balcony'）
del house[4:6]
print (house) # 輸出：['kitchen', 'living room', 'bedroom', 'bathoom', 'terrace']

# 刪除步長為 2 的元素（'kitchen'，'bedroom'，'terrace'）
del house[::2]
print (house) # 輸出：['living room', 'bathoom']

# 刪除整個 house 列表
del house

# 嘗試輸出會引發錯誤，因為 house 列表已被刪除
print (house) # NameError: name 'house' is not</pre>
<p><span>第八題:08_for_range</span></p>
<p><span>範例程式:<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/eb2e4327b65a0fe5c307ea329ef2f69c/raw/f64ab3abdda2967cdf82a9ac00edcf3b83c8346e/1a_w3_site_repo_brython.py?src=https://gist.githubusercontent.com/41323101/b215a228263334e0904c318e6ba7f919/raw/6ec4276ec1b216749a433ed83a145f937b36a896/w12%252008_for_range">配對朋友和食物</a></span></p>
<p>動態處理更大範圍的清單。</p>
<p>增加錯誤處理（如清單長度不一致）。</p>
<p>整合更靈活的字串處理方式（如使用 <code>zip</code> 或 <code>f-string</code>）。</p>
<p></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義朋友的名字
friends = ["Geetha", "Luca", "Daisy", "Juhan"]

# 定義不同食物
dishes = ["sushi", "burgers", "tacos", "pizza"]

print ("My friends' names are:") # 輸出：(My friends' names are:)

print (friends) # 列印friends清單：['Geetha', 'Luca', 'Daisy', 'Juhan']

# 使用for迴圈，變數 index 從 0 到 3（包含 0，不包含 4）
for index in range (0,4):
print ("index: " + str(index))
print ("friend: " + friends[index])

# 列印食物清單
print ("Their favorite dishes are:") # 輸出：Their favorite dishes are:

print (dishes) # 列印dishes清單：['sushi', 'burgers', 'tacos', 'pizza']

# 用迴圈逐一打印每種食物及其索引
for index in range (0,4):
print ("index: " + str(index))
print ("dish: " + dishes[index])

# 配對朋友和食物並打印
for index in range (0,4):
print ("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</pre>
<p><span>第九題:09_for_loop_if_equals</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/42aede87f76e9a781c6649dc98cd7a94/raw/f1e678a69d376a46534cc2759b7cc48ce06c0a6a/w12%252009_for_loop_if_equals">動物</a></span></p>
<p>動物清單： 程式列出所有動物及其位置。</p>
<p>特定條件判斷： 當觀察到目標動物時，輸出特別的訊息，強調目標。</p>
<p>靈活性： 清單和 <code>wanted_to_see</code> 都可以改變，程式可適應新的資料。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義動物清單
animals = ["giraffe", "penguin", "dolphin"]

print (animals) # 輸出：['giraffe', 'penguin', 'dolphin']

# 使用for迴圈，變數 i 從 0 遍歷到清單的長度減 1
# for each position in the list
for i in range (0, len(animals)):
print ("-- Beginning of loop --")
# print each element and its position
print ("The element in position " + str(i) + " is " + animals[i])

# 定義目標動物
wanted_to_see = "penguin"

# 使用for迴圈遍歷清單
# for each position in the list
for i in range (0, len(animals)):
# if the current animal is what you really wanted to see
if animals[i] == wanted_to_see:
# print out that that's the animal you really wanted to see
print ("I saw a " + animals[i] + " and I really wanted to see it!") # 輸出：I saw a &lt;動物&gt; and I really wanted to see it!
# if the current animal is not what you really wanted to see
else:
# just print out that you saw it
print ("I saw a " + animals[i]) # 輸出：I saw a &lt;動物&gt;</pre>
<p><br/><br/></p>
<p><br/><br/></p><h2>w13</h2>
<h3>w13_hw</h3>
<p>作業一</p>
<p>程式:</p>
<pre>&lt;p&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!--啟動Brython--&gt;
&lt;p&gt;
&lt;script&gt;// &lt;![CDATA[
-window.onload=function(){
brython({debug:1,pythonpath:['/static/','./../downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;p&gt;
&lt;script type="text/python"&gt;// &lt;![CDATA[</pre>
<p>作業二</p>
<p>程式:</p>
<p>&lt;!-- 啟動 Brython --&gt;<br/>&lt;p&gt;<br/>&lt;script&gt;<br/>window.onload=function(){<br/>brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});<br/>}<br/>&lt;/script&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import html<br/>from browser import document as doc</p>
<p># 利用 html 建立 canvas 超文件物件<br/>canvas = html.CANVAS(width=400, height=400)<br/>brython_div = doc["brython_div1"]<br/>brython_div &lt;= canvas</p>
<p>ctx = canvas.getContext("2d")<br/>ctx.lineWidth = 1</p>
<p># 繪製兩個矩形<br/>ctx.strokeStyle = 'red' # 設定矩形顏色為紅色<br/>ctx.beginPath() <br/>ctx.rect(10, 10, 200, 200)<br/>ctx.rect(110, 110, 200, 200)<br/>ctx.stroke()</p>
<p>作業三</p>
<p>程式:</p>
<p>&lt;!-- 啟動 Brython --&gt;<br/>&lt;p&gt;<br/>&lt;script&gt;<br/>window.onload=function(){<br/>brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});<br/>}<br/>&lt;/script&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import html<br/>from browser import document as doc</p>
<p># 利用 html 建立 canvas 超文件物件<br/>canvas = html.CANVAS(width=600, height=600) # 調整畫布大小以容納圓形<br/>brython_div = doc["brython_div1"]<br/>brython_div &lt;= canvas</p>
<p>ctx = canvas.getContext("2d")<br/>ctx.lineWidth = 1</p>
<p># 1. 繪製兩個矩形 (紅色邊框)<br/>ctx.strokeStyle = 'red' # 設定矩形的邊框顏色為紅色<br/>ctx.beginPath()<br/>ctx.rect(100, 100, 200, 200) # 第一個正方形的左上角在(100, 100)，邊長200<br/>ctx.rect(200, 200, 200, 200) # 第二個正方形的左上角在(200, 200)，邊長200<br/>ctx.stroke()</p>
<p># 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角<br/>ctx.strokeStyle = 'blue' # 設定對角線顏色為藍色<br/>ctx.beginPath()<br/>ctx.moveTo(100, 100) # 起點為第一個矩形的左上角 (100, 100)<br/>ctx.lineTo(300, 300) # 終點為第一個矩形的右下角 (300, 300)<br/>ctx.stroke()</p>
<p># 3. 繪製兩個外切圓 (黑色)<br/>ctx.strokeStyle = 'black' # 設定圓的顏色為黑色</p>
<p># 第一個矩形的外切圓<br/>ctx.beginPath()<br/>ctx.arc(200, 200, 141.4, 0, 2 * 3.14) # 圓心在(200, 200)，半徑為141.4（sqrt(2) * 邊長的一半）<br/>ctx.stroke()</p>
<p># 第二個矩形的外切圓<br/>ctx.beginPath()<br/>ctx.arc(300, 300, 141.4, 0, 2 * 3.14) # 圓心在(300, 300)，半徑為141.4<br/>ctx.stroke()</p>
<p>作業四</p>
<p><span>在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色</span></p>
<p>程式:</p>
<p>&lt;div id="brython_div1"&gt;&lt;/div&gt;</p>
<p>&lt;script&gt;<br/>window.onload = function () {<br/> brython({ debug: 1, pythonpath: ['./../cmsimde/static/', './../downloads/py/'] });<br/>}<br/>&lt;/script&gt;<br/>&lt;script type="text/python3"&gt;<br/>from browser import html<br/>from browser import document as doc<br/>import math</p>
<p># 建立 canvas 元素<br/>canvas = html.CANVAS(width=600, height=600)<br/>brython_div = doc["brython_div1"]<br/>brython_div &lt;= canvas</p>
<p>ctx = canvas.getContext("2d")<br/>ctx.lineWidth = 1</p>
<p># 矩形參數<br/>rect_size = 200<br/>rect1_top_left = (100, 100) # 第一個矩形左上角座標<br/>rect2_top_left = (200, 200) # 第二個矩形左上角座標</p>
<p># 繪製並填充第一個矩形<br/>ctx.fillStyle = "rgba(255, 200, 200, 0.5)" # 半透明紅色填充<br/>ctx.beginPath()<br/>ctx.rect(rect1_top_left[0], rect1_top_left[1], rect_size, rect_size)<br/>ctx.fill()<br/>ctx.strokeStyle = 'red'<br/>ctx.stroke()</p>
<p># 繪製並填充第二個矩形<br/>ctx.fillStyle = "rgba(200, 255, 200, 0.5)" # 半透明綠色填充<br/>ctx.beginPath()<br/>ctx.rect(rect2_top_left[0], rect2_top_left[1], rect_size, rect_size)<br/>ctx.fill()<br/>ctx.strokeStyle = 'red'<br/>ctx.stroke()</p>
<p># 繪製第一個矩形的對角線 (藍色)<br/>ctx.strokeStyle = 'blue'<br/>ctx.beginPath()<br/>ctx.moveTo(rect1_top_left[0], rect1_top_left[1]) # 起點：左上角<br/>ctx.lineTo(rect1_top_left[0] + rect_size, rect1_top_left[1] + rect_size) # 終點：右下角<br/>ctx.stroke()</p>
<p># 計算外切圓參數<br/>radius = math.sqrt(2) * (rect_size / 2) # 半徑為 sqrt(2) * (矩形邊長的一半)<br/>circle1_center = (rect1_top_left[0] + rect_size / 2, rect1_top_left[1] + rect_size / 2) # 第一個圓心<br/>circle2_center = (rect2_top_left[0] + rect_size / 2, rect2_top_left[1] + rect_size / 2) # 第二個圓心</p>
<p># 繪製並填充第一個外切圓<br/>ctx.fillStyle = "rgba(200, 200, 255, 0.5)" # 半透明藍色填充<br/>ctx.beginPath()<br/>ctx.arc(circle1_center[0], circle1_center[1], radius, 0, 2 * math.pi)<br/>ctx.fill()<br/>ctx.strokeStyle = 'black'<br/>ctx.stroke()</p>
<p># 繪製並填充第二個外切圓<br/>ctx.fillStyle = "rgba(255, 255, 200, 0.5)" # 半透明黃色填充<br/>ctx.beginPath()<br/>ctx.arc(circle2_center[0], circle2_center[1], radius, 0, 2 * math.pi)<br/>ctx.fill()<br/>ctx.strokeStyle = 'black'<br/>ctx.stroke()<br/>&lt;/script&gt;</p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<pre><!--啟動Brython--></pre>
<p>
<script>
-window.onload=function(){
brython({debug:1,pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1">
<p>
<script type="text/python">
from browser import html
from browser import document as doc
canvas = html.CANVAS(width=400,height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx=canvas.getContext("2d")

ctx.lineWidth = 1
ctx.strokeStyle =  'blue'
ctx.beginPath()
ctx.moveTo(10,10)
ctx.lineTo(100,100)
ctx.stroke()
</script>
</p>
</div>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<pre><!--啟動Brython--></pre>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製兩個矩形
ctx.strokeStyle = 'red'  # 設定矩形顏色為紅色
ctx.beginPath() 
ctx.rect(10, 10, 200, 200)
ctx.rect(110, 110, 200, 200)
ctx.stroke()

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()
</script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 1. 繪製兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形的左上角在(100, 100)，邊長200
ctx.rect(200, 200, 200, 200)  # 第二個正方形的左上角在(200, 200)，邊長200
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()

# 3. 繪製兩個外切圓 (黑色)
ctx.strokeStyle = 'black'  # 設定圓的顏色為黑色

# 第一個矩形的外切圓
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 圓心在(200, 200)，半徑為141.4（sqrt(2) * 邊長的一半）
ctx.stroke()

# 第二個矩形的外切圓
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 圓心在(300, 300)，半徑為141.4
ctx.stroke()
</script>
</p>
<div id="brython_div1"><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/xcnGEl8l1kw?si=Do3liHJfnJPWO354" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></div>
<div></div>
<div>心得:</div>
<div><span>HTML5 的 Canvas API 提供了一個靈活的 2D 繪圖工具，可以實現圖形、路徑填充與動畫。但 API 本身有一定的學習曲線，例如理解 <code>arc()</code>、<code>rect()</code> 等方法的參數。這個範例結合了編程、數學和視覺設計的技巧，是一個很好的學習範例。不僅能加深對 Canvas API 的理解，還可以學習如何用程式碼創建清晰的幾何圖形。當然，也讓人意識到程式中的細節處理是成功完成一個視覺效果的關鍵。</span></div>
<script>
window.onload = function () {
    brython({ debug: 1, pythonpath: ['./../cmsimde/static/', './../downloads/py/'] });
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 建立 canvas 元素
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 矩形參數
rect_size = 200
rect1_top_left = (100, 100)  # 第一個矩形左上角座標
rect2_top_left = (200, 200)  # 第二個矩形左上角座標

# 繪製並填充第一個矩形
ctx.fillStyle = "rgba(255, 200, 200, 0.5)"  # 半透明紅色填充
ctx.beginPath()
ctx.rect(rect1_top_left[0], rect1_top_left[1], rect_size, rect_size)
ctx.fill()
ctx.strokeStyle = 'red'
ctx.stroke()

# 繪製並填充第二個矩形
ctx.fillStyle = "rgba(200, 255, 200, 0.5)"  # 半透明綠色填充
ctx.beginPath()
ctx.rect(rect2_top_left[0], rect2_top_left[1], rect_size, rect_size)
ctx.fill()
ctx.strokeStyle = 'red'
ctx.stroke()

# 繪製第一個矩形的對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(rect1_top_left[0], rect1_top_left[1])  # 起點：左上角
ctx.lineTo(rect1_top_left[0] + rect_size, rect1_top_left[1] + rect_size)  # 終點：右下角
ctx.stroke()

# 計算外切圓參數
radius = math.sqrt(2) * (rect_size / 2)  # 半徑為 sqrt(2) * (矩形邊長的一半)
circle1_center = (rect1_top_left[0] + rect_size / 2, rect1_top_left[1] + rect_size / 2)  # 第一個圓心
circle2_center = (rect2_top_left[0] + rect_size / 2, rect2_top_left[1] + rect_size / 2)  # 第二個圓心

# 繪製並填充第一個外切圓
ctx.fillStyle = "rgba(200, 200, 255, 0.5)"  # 半透明藍色填充
ctx.beginPath()
ctx.arc(circle1_center[0], circle1_center[1], radius, 0, 2 * math.pi)
ctx.fill()
ctx.strokeStyle = 'black'
ctx.stroke()

# 繪製並填充第二個外切圓
ctx.fillStyle = "rgba(255, 255, 200, 0.5)"  # 半透明黃色填充
ctx.beginPath()
ctx.arc(circle2_center[0], circle2_center[1], radius, 0, 2 * math.pi)
ctx.fill()
ctx.strokeStyle = 'black'
ctx.stroke()
</script>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>