<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323101">https://github.com/mdecp2024/hw-41323101</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323101/content/index.html">https://mdecp2024.github.io/hw-41323101/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/vbDkznlYB1g?si=CSmaeuh2OJStIk1-" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>題目一</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/rUrrZEdlrco?si=4xR-dAWn-2xw2LyZ" title="YouTube video player" width="560"></iframe></p>
<p>題目二</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/EHe3GpYwhZI?si=FgBtAZaO8aVmDMMM" title="YouTube video player" width="560"></iframe></p>
<p>題目三</p>
<p><br/><br/><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/LpYjTtiTbX4?si=gutCiZNvO_xSR9e7" title="YouTube video player" width="560"></iframe></p>
<h3>w11_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/8937094c19c933c5d8175d52045a06a0/raw/f51b699f4eadc2f6296ea24b2643ae246135e4c5/w11-1">題目一</a></p>
<p><span>已知可以用 Python 程式</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a><span>, 或</span><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a><span>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/8937094c19c933c5d8175d52045a06a0/raw/e8952afb8846c67358d457471657dc450b45d9cd/w11-2">題目二</a></p>
<p><span>已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</span></p>
<p><span><img alt="" height="357" src="/images/螢幕擷取畫面 2024-11-28 151314.png" width="387"/></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/rEnjoOjjYbA?si=Ekg0O87LCZ_JwMet" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe><img alt="" src="/images/index.html"/></p>
<p>在程式中，圓形的邊界是通過數學公式判斷的，因此，如何精確地定義圓形的範圍非常重要。當設置不同的圓心或半徑時，可能會需要調整邏輯來確保圓形能正確顯示。</p>
<p>使用 Brython 在網頁上展示 Python 程式設計是非常有趣且具有挑戰性的。可以在網頁中實現更多功能，並會發現網頁開發中的一些技巧和細節，這對編程能力的提升非常有幫助。</p>
<p></p>
<h3>w12_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/f4f33e6df6288a8409e64c214f332243/raw/f8ff4bdd587e1ca33afdfa4a27b60dea40b5a6a1/w12">w12_1</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/BztnnKtJIsw?si=zfj4bYMyzw9cuACB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<p><span>這次作業不僅提升了我的 Python 編程能力，還增強了我對網頁開發技術的理解。通過將 JupyterLab 中的 Python 程式碼轉換為可在 Brython 上運行的代碼，我學到了如何設計交互式應用，並熟悉了如何將程式碼嵌入到現代網頁中。</span></p>
<p><span></span></p>
<p><span>第六題:06_list_slicing</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/b801d502a8116ba25d214ef10034bcc4/raw/6c9588b9961a72d347a0092d9c68a536499547e1/w12%252006_list_slicing">城市</a></span></p>
<p><span></span></p>
<p>根據索引選取單個或多個元素。</p>
<p>設定步長來篩選間隔元素。</p>
<p>使用負數索引來倒序選取元素。</p>
<p>反轉整個列表。</p>
<p></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]
print(cities) # 輸出所有城市
print(cities[1]) # 輸出索引 1 的城市
print(cities[1:4]) # 從索引 1 到 3（不包含索引 4）
print(cities[1:4:2]) # 從索引 1 到 3，每隔一個元素取一次
print(cities[0:3]) # 從索引 0 到 2（不包含索引 3）
print(cities[:3]) # 與上面相同，從開始到索引 2（不包含索引 3）
print(cities[2:5]) # 從索引 2 到 4（不包含索引 5）
print(cities[2:]) # 從索引 2 開始到列表結尾
print(cities[0:5:2]) # 從索引 0 到 4，每隔一個元素取一次
print(cities[::2]) # 從開始到結尾，每隔一個元素取一次
print(cities[4]) # 輸出索引 4 的城市
print(cities[-1]) # 輸出最後一個元素（倒數第 1 個）
print(cities[-4:-1]) # 切片：從倒數第 4 個到倒數第 2 個（不包含倒數第 1 個）
print(cities[3:0:-1]) # 從索引 3 到 1（不包含索引 0）
print(cities[-2:-5:-1]) # 從倒數第 2 個到倒數第 5 個
print(cities[::-1]) # 將整個列表反轉</pre>
<p><span></span></p>
<p><span>第七題:07_list_slicing_use</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/0942ce6652e125fcbd4ff63e75ce3ee1/raw/fba5759b043cc79774f9e8449da288683250cde8/w12%252007_list_slicing_use">列表操作</a></span></p>
<p>列表操作（例如合併和插入元素）允許靈活地修改列表內容。</p>
<p>修改列表中的切片會影響原列表的結構。</p>
<p>使用 <code>del</code> 可以刪除列表中的特定元素或整個列表。</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義感官列表
senses = ["eyes", "nose", "ears", "tongue", "skin"]
print (senses) # 輸出：['eyes', 'nose', 'ears', 'tongue', 'skin']

# 修改(索引 1)的元素替換為 "smell"
senses[1] = "smell"
print (senses) # 輸出：['eyes', 'smell', 'ears', 'tongue', 'skin']

# 修改索引第三和 第四的元素替換為 ["taste", "touch"]，
senses[3:5] = ["taste", "touch"]
print (senses) # 輸出：['eyes', 'smell', 'ears', 'taste', 'touch']

# 修改索引第零到第二的元素替換為 ["sight", "hearing"]
senses[0:3:2] = ["sight", "hearing"]
print (senses) # 輸出：['sight', 'smell', 'hearing', 'taste', 'touch']

# 定義行星列表
planets = ["Mercury", "Mars", "Earth", "Neptune"]
print (planets) # 輸出：['Mercury', 'Mars', 'Earth', 'Neptune']

# 向 planets "Jupiter"加入列表中，
planets = planets + ["Jupiter"]
print (planets) # 輸出：['Mercury', 'Mars', 'Earth', 'Neptune', 'Jupiter']

# 將 "Venus" 插入到 planets 列表的索引 2 位置
planets = planets[0:2] + ["Venus"] + planets[2:5]
print (planets) # 輸出：['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Jupiter']

# 在索引 5 位置插入 "Uranus" 和 "Saturn"
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
print(planets) # 輸出：['Mercury', 'Mars', 'Venus', 'Earth', 'Neptune', 'Uranus', 'Saturn', 'Jupiter']

# 定義房間列表
house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print (house) # 輸出：['kitchen', 'dining room', 'living room', 'bedroom', 'bathoom', 'garden', 'balcony', 'terrace']

# 刪除索引 1 的元素（'dining room'）
del house[1]
print (house) # 輸出：['kitchen', 'living room', 'bedroom', 'bathoom', 'garden', 'balcony', 'terrace']

# 刪除索引 4 到 5 的元素（'garden' 和 'balcony'）
del house[4:6]
print (house) # 輸出：['kitchen', 'living room', 'bedroom', 'bathoom', 'terrace']

# 刪除步長為 2 的元素（'kitchen'，'bedroom'，'terrace'）
del house[::2]
print (house) # 輸出：['living room', 'bathoom']

# 刪除整個 house 列表
del house

# 嘗試輸出會引發錯誤，因為 house 列表已被刪除
print (house) # NameError: name 'house' is not</pre>
<p><span></span></p>
<p><span>第八題:08_for_range</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/b215a228263334e0904c318e6ba7f919/raw/6ec4276ec1b216749a433ed83a145f937b36a896/w12%252008_for_range">配對朋友和食物</a></span></p>
<p>動態處理更大範圍的清單。</p>
<p>增加錯誤處理（如清單長度不一致）。</p>
<p>整合更靈活的字串處理方式（如使用 <code>zip</code> 或 <code>f-string</code>）。</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義朋友的名字
friends = ["Geetha", "Luca", "Daisy", "Juhan"]

# 定義不同食物
dishes = ["sushi", "burgers", "tacos", "pizza"]

print ("My friends' names are:") # 輸出：(My friends' names are:)

print (friends) # 列印friends清單：['Geetha', 'Luca', 'Daisy', 'Juhan']

# 使用for迴圈，變數 index 從 0 到 3（包含 0，不包含 4）
for index in range (0,4):
print ("index: " + str(index))
print ("friend: " + friends[index])

# 列印食物清單
print ("Their favorite dishes are:") # 輸出：Their favorite dishes are:

print (dishes) # 列印dishes清單：['sushi', 'burgers', 'tacos', 'pizza']

# 用迴圈逐一打印每種食物及其索引
for index in range (0,4):
print ("index: " + str(index))
print ("dish: " + dishes[index])

# 配對朋友和食物並打印
for index in range (0,4):
print ("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</pre>
<p><span></span></p>
<p><span>第九題:09_for_loop_if_equals</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/42aede87f76e9a781c6649dc98cd7a94/raw/f1e678a69d376a46534cc2759b7cc48ce06c0a6a/w12%252009_for_loop_if_equals">動物</a></span></p>
<p>動物清單： 程式列出所有動物及其位置。</p>
<p>特定條件判斷： 當觀察到目標動物時，輸出特別的訊息，強調目標。</p>
<p>靈活性： 清單和 <code>wanted_to_see</code> 都可以改變，程式可適應新的資料。</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義動物清單
animals = ["giraffe", "penguin", "dolphin"]

print (animals) # 輸出：['giraffe', 'penguin', 'dolphin']

# 使用for迴圈，變數 i 從 0 遍歷到清單的長度減 1
# for each position in the list
for i in range (0, len(animals)):
print ("-- Beginning of loop --")
# print each element and its position
print ("The element in position " + str(i) + " is " + animals[i])

# 定義目標動物
wanted_to_see = "penguin"

# 使用for迴圈遍歷清單
# for each position in the list
for i in range (0, len(animals)):
# if the current animal is what you really wanted to see
if animals[i] == wanted_to_see:
# print out that that's the animal you really wanted to see
print ("I saw a " + animals[i] + " and I really wanted to see it!") # 輸出：I saw a &lt;動物&gt; and I really wanted to see it!
# if the current animal is not what you really wanted to see
else:
# just print out that you saw it
print ("I saw a " + animals[i]) # 輸出：I saw a &lt;動物&gt;</pre>
<p></p>
<p></p>
<p><span>第十題:10_for_search</span></p>
<p><span>範例程式:<a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/8f09d16d0d158e344af8214c32e94b15/raw/d61a026a183d6ab9add9a8634e1c961cd64c97b9/w12%252010_for_search">配件的名稱長度</a></span></p>
<p>清單遍歷與條件篩選： 通過 <code>for</code> 迴圈遍歷配件清單，並使用條件語句來過濾出長度為特定數字的配件，或者根據位置篩選出符合條件的配件。</p>
<p>動態條件設定： 使用變數設定閾值（如長度或位置），使得程式在不同情況下可靈活運作。</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 輸出每個配件的名稱及其位置
accessories = ["belt", "hat", "gloves", "sunglasses", "ring"] # 列印每個配件的名稱以及它在清單中的位置
print (accessories)
# for each position in the list
for i in range (len(accessories)):
#print each elements and its position
print ("The element " + accessories[i] + " is in position " + str(i))

# 輸出長度為 6 的配件
# for each position in the list
for i in range (len(accessories)):
# if the length of the element equals 6
if len(accessories[i]) == 6:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")

# 輸出長度小於 6 的配件
# for each position in the list
for i in range (len(accessories)):
# if the length of the element is less than 6
if len(accessories[i]) &lt; 6:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")
# defining the threshold

# 輸出長度大於設定閾值 6 的配件
n_of_characters = 6
# for each position in the list
for i in range (len(accessories)):
# if the length of the element is greater than the threshold
if len(accessories[i]) &gt; n_of_characters:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")
# defining the threshold

# 輸出長度不等於設定閾值的配件
n_of_characters = 6
# for each position in the list
for i in range (len(accessories)):
# if the length of the element is not equal to the threshold
if len(accessories[i]) != n_of_characters:
# print the element, its position, and its number of characters
print ("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))
# defining the threshold

# 輸出位置小於或等於指定位置 2 的配件
position = 2
# for each position in the list
for i in range (len(accessories)):
# if the position of the element is less then or equal to to the threshold
if i &lt;= position:
# print the element, its position, and its position characteristic
print ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))
# defining the threshold

# 輸出位置大於或等於指定位置 2 的配件
position = 2
# for each position in the list
for i in range (len(accessories)):
# if the position of the element is greater then or equal to to the threshold
if i &gt;= position:
# print the element, its position, and its position characteristic
print ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))</pre>
<p></p>
<h3>w13_hw</h3>
<p></p>
<p><span>在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色</span></p>
<p><span></span></p>
<p>程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;// &lt;![CDATA[
from browser import html
from browser import document as doc
import math

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 混色模式設置（以確保透明效果）
ctx.globalCompositeOperation = "source-over"

# 黑邊圓 *2（每個畫四個邊）
ctx.strokeStyle = 'black'
# 第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "#1E90FF" # DodgerBlue
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "#FF4500" # OrangeRed
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "#32CD32" # LimeGreen
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "#FFFFE0" # LightYellow
ctx.fill()
ctx.stroke()

# 第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "#9400D3" # DarkViolet
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "#808000" # Olive
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "#FFA07A" # LightSalmon
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "#FF1493" # DeepPink
ctx.fill()
ctx.stroke()

# 紅方形 *2（4個三角形）
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "#FFD700" # Gold
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "#4B0082" # Indigo
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "#4682B4" # SteelBlue
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "#ADFF2F" # GreenYellow
ctx.fill()
ctx.stroke()

# 重疊的小方形
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "#1E90FF" # DodgerBlue
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "#6A5ACD" # SlateBlue
ctx.fill()
ctx.stroke()

# 藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()
// ]]</pre>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!--啟動Brython-->
<p>
<script>
-window.onload=function(){
brython({debug:1,pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math
 
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
ctx = canvas.getContext("2d")
ctx.lineWidth = 4
 
# 混色模式設置（以確保透明效果）
ctx.globalCompositeOperation = "source-over"
 
# 黑邊圓 *2（每個畫四個邊）
ctx.strokeStyle = 'black'
# 第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "#1E90FF"  # DodgerBlue
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "#FF4500"  # OrangeRed
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "#32CD32"  # LimeGreen
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "#FFFFE0"  # LightYellow
ctx.fill()
ctx.stroke()
 
# 第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "#9400D3"  # DarkViolet
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "#808000"  # Olive
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "#FFA07A"  # LightSalmon
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "#FF1493"  # DeepPink
ctx.fill()
ctx.stroke()
 
# 紅方形 *2（4個三角形）
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "#FFD700"  # Gold
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "#4B0082"  # Indigo
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "#4682B4"  # SteelBlue
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "#ADFF2F"  # GreenYellow
ctx.fill()
ctx.stroke()
 
# 重疊的小方形
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "#1E90FF"  # DodgerBlue
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "#6A5ACD"  # SlateBlue
ctx.fill()
ctx.stroke()
 
# 藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()
</script>
</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/xcnGEl8l1kw?si=lyxNbcu1_C_q0Y9_" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<p><span>心得:</span></p>
<p><span>HTML5 的 Canvas API 提供了一個靈活的 2D 繪圖工具，可以實現圖形、路徑填充與動畫。但 API 本身有一定的學習曲線，例如理解 arc()、rect() 等方法的參數。這個範例結合了編程、數學和視覺設計的技巧，是一個很好的學習範例。不僅能加深對 Canvas API 的理解，還可以學習如何用程式碼創建清晰的幾何圖形。當然，也讓人意識到程式中的細節處理是成功完成一個視覺效果的關鍵。</span></p>
<h3>w14_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/d163b1f80381460951b9c54e7b74360f/raw/33c5c724b455a301057438011765c62209a25d25/w14">程式</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
canvas = html.CANVAS(width=canvas_width, height=canvas_height)
brython_div = doc[id]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")
return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
r = random.randint(0, 255)
g = random.randint(0, 255)
b = random.randint(0, 255)
return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 繪製三個圓並填充區域
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
canvas, ctx = initialize_canvas(400, 400)
ctx.clearRect(0, 0, canvas.width, canvas.height)

# 顏色區域存儲字典
color_dict = {}

for py in range(0, canvas.height):
for px in range(0, canvas.width):
# 判斷點是否在每個圓內
in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

# 確定區域類型
if in_circle1 and in_circle2 and in_circle3:
region = "intersection_all"
elif in_circle1 and in_circle2:
region = "intersection_1_2"
elif in_circle1 and in_circle3:
region = "intersection_1_3"
elif in_circle2 and in_circle3:
region = "intersection_2_3"
elif in_circle1:
region = "circle1"
elif in_circle2:
region = "circle2"
elif in_circle3:
region = "circle3"
else:
region = "background"

# 分配顏色
if region not in color_dict:
color_dict[region] = random_color_generator() if region != "background" else "white"

ctx.fillStyle = color_dict[region]
ctx.fillRect(px, py, 1, 1)

# 設定三個圓的參數
x1, y1, r1 = 150, 200, 100
x2, y2, r2 = 250, 200, 100
x3, y3, r3 = 200, 300, 100

# 繪製三個圓並填充
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<h3>w15_hw</h3>
<p><span style="background-color: #ffff99;">題目一:</span><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/b7010044cb0e3002fb780cfe57d4a3f2/raw/3baf2cfdd0afc56cd7c714490ee3deb0b6af7cfa/w15%25E9%25A1%258C%25E7%259B%25AE%25E4%25B8%2580">從 1 累加到 100</a></p>
<p><strong>設計思考：</strong></p>
<pre>設計一個函式來計算從 <code>init</code> 到 <code>upto</code> 的整數總和。<br/><br/>使用 <code>for</code> 迴圈遍歷從 <code>init</code> 到 <code>upto</code> 的數字，並將這些數字累加起來。</pre>
<p><strong>執行過程：</strong></p>
<ol>
<li>
<pre><strong>初始化變數</strong>：首先設置累加變數 <code>sum = 0</code>，並定義 <code>init</code> 和 <code>upto</code> 的值（例如，<code>init = 1</code> 和 <code>upto = 100</code>）。</pre>
</li>
<li>
<pre><strong>使用 <code>for</code> 迴圈</strong>：<code>for i in range(init, upto + 1)</code> 用來遍歷從 <code>init</code> 到 <code>upto</code>（包含 <code>upto</code>）的所有數字。</pre>
</li>
<li>
<pre><strong>執行累加</strong>：在迴圈內，將每個數字加到 <code>sum</code> 中，這可以通過 <code>sum = sum + i</code> 完成。</pre>
</li>
<li>
<pre><strong>輸出結果</strong>：最後，將結果以格式化字符串的方式輸出。</pre>
</li>
</ol>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># sum 初始值設為 0
sum = 0
init = 1
upto = 100
# 利用 for 重複迴圈與變數加法進行累加
for i in range(init, upto+1):
sum = sum + i
print("從" + str(init) + "累加到" + str(upto) + "=" + str(sum))</pre>
<p><strong>程式碼解釋：</strong></p>
<ol>
<li>
<pre><code>sum = 0</code>：初始化 <code>sum</code> 變數為 0，用來儲存累加的總和。</pre>
</li>
<li>
<pre><code>for i in range(init, upto + 1)</code>：這行程式使用 <code>range</code> 函式來生成一個從 <code>init</code> 到 <code>upto</code> 的數字範圍，並且 <code>range</code> 的結尾是 <code>upto+1</code>，以確保包含 <code>upto</code> 本身。</pre>
</li>
<li>
<pre><code>sum = sum + i</code>：這行將每個遍歷到的數字加到 <code>sum</code> 中。</pre>
</li>
<li>
<pre><code>print("從" + str(init) + "累加到" + str(upto) + "=" + str(sum))</code>：最終輸出累加的結果。</pre>
</li>
</ol>
<p><strong>心得：</strong></p>
<ul>
<li>
<pre>這段程式碼非常簡單，使用了 <code>for</code> 迴圈來完成累加。每次迴圈會將當前的數字加到總和中，最後輸出結果。</pre>
</li>
</ul>
<p><strong></strong></p>
<p><br/><span><span style="background-color: #ffff99;">題目二:</span><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/1377b99e425bfc5e07be7953c7169d48/raw/e36664ff9b6eda7cf2e305e49fa9a5e6365144a6/w15%25E9%25A1%258C%25E7%259B%25AE%25E4%25BA%258C">addto</a></span></p>
<p><strong>設計思考：</strong></p>
<pre>設計一個函式，計算從 <span>init </span>到 upto 的整數總和。<br/>使用 for 迴圈來遍歷 init 到 upto 之間的數字，並進行累加。將結果返回。</pre>
<p><br/><strong>執行過程：</strong></p>
<ul>
<li>
<p><strong>定義<span> </span><code>addto</code><span> </span>函式</strong>：</p>
<ol>
<li>
<pre><code>sum = 0</code>：初始化累加總和為 0。</pre>
</li>
<li>
<pre>使用 <code>for i in range(init, upto + 1)</code> 來遍歷範圍內的數字（包括 <code>upto</code>）。</pre>
</li>
<li>
<pre>將每一個數字加到 <code>sum</code> 上。</pre>
</li>
<li>
<pre>返回累加結果。</pre>
</li>
</ol>
</li>
</ul>
<ul>
<li>
<p><strong>呼叫 <code>addto</code> 並輸出結果</strong>：</p>
<ol>
<li>設定 <code>init = 1</code> 和 <code>upto = 100</code>。</li>
<li>呼叫 <code>addto(init, upto)</code> 函式，並顯示結果。</li>
</ol>
</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義 addto 函式
def addto(init, upto):
sum = 0
for i in range(init, upto+1):
sum = sum + i
return sum

# 呼叫函式 addto 並輸出結果
init = 1
upto = 100
result = addto(init, upto)
print("從" + str(init) + "累加到" + str(upto) + "=" + str(result))</pre>
<p><strong>程式碼解釋：</strong></p>
<ul>
<li>
<pre><code>sum = 0</code>：初始化 <code>sum</code>，用來儲存累加結果。</pre>
</li>
<li>
<pre><code>for i in range(init, upto + 1)</code>：<code>range(init, upto + 1)</code> 會生成從 <code>init</code> 到 <code>upto</code> 的所有數字。<code>for</code> 迴圈會遍歷這些數字並執行累加。</pre>
</li>
<li>
<pre><code>sum = sum + i</code>：每次循環，將當前數字 <code>i</code> 加到 <code>sum</code> 上。</pre>
</li>
<li>
<pre><code>return sum</code>：返回累加後的結果。</pre>
</li>
</ul>
<p><strong>心得：</strong></p>
<p>程式簡單易懂，使用 <code>for</code> 迴圈順利解決問題。這是典型的數字累加問題，<code>range</code> 函式與 <code>sum</code> 累加過程很直觀。</p>
<p></p>
<p><span><span style="background-color: #ffff99;">題目三:</span><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/790a9bf56089db9c1db0e610a3623fa1/raw/31e6245b59e6ba7cecc0f8e84636b38a86f1c512/w15%25E9%25A1%258C%25E7%259B%25AE%25E4%25B8%2589">add_only_even</a></span><br/><br/></p>
<p><strong>設計思考：</strong></p>
<p>計算從 <code>init</code> 到 <code>upto</code> 之間所有偶數的總和。</p>
<p>遍歷範圍內的每個數字，判斷是否為偶數。若是偶數，則加總。</p>
<p><strong>執行過程：</strong></p>
<ul>
<li>
<pre><strong>定義 <code>add_only_even</code> 函式</strong>：</pre>
<ol>
<li>
<pre>初始化 <code>sum = 0</code>，用來儲存偶數的總和。</pre>
</li>
<li>
<pre>遍歷範圍內的每個數字，使用 <code>if i % 2 == 0</code> 判斷是否為偶數。</pre>
</li>
<li>
<pre>若是偶數，就將其加到 <code>sum</code> 中。</pre>
</li>
<li>
<pre>返回累加後的結果。</pre>
</li>
</ol>
</li>
<li>
<pre><strong>呼叫 <code>add_only_even</code> 並輸出結果</strong>：</pre>
<ol>
<li>
<pre>設定 <code>init = 1</code> 和 <code>upto = 100</code>。</pre>
</li>
<li>
<pre>呼叫 <code>add_only_even(init, upto)</code> 函式，並顯示結果</pre>
</li>
</ol>
</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義 add_only_even 函式
def add_only_even(init, upto):
sum = 0
for i in range(init, upto + 1):
if i % 2 == 0: # 判斷是否為偶數
sum = sum + i
return sum

# 呼叫函式 add_only_even 並輸出結果
init = 1
upto = 100
result = add_only_even(init, upto)
print("從" + str(init) + "累加到" + str(upto) + "的偶數總和為=" + str(result))</pre>
<p><strong>程式碼解釋：</strong></p>
<ul>
<li>
<pre><code>if i % 2 == 0</code>：判斷 <code>i</code> 是否為偶數，若是則執行加法。</pre>
</li>
<li>
<pre>其他部分與 <code>addto</code> 函式類似。</pre>
</li>
</ul>
<p><strong>心得：</strong></p>
<ul>
<li>
<pre>利用 <code>if i % 2 == 0</code> 判斷偶數非常直觀。程式簡單，且能夠有效過濾非偶數的數字。</pre>
</li>
</ul>
<p><br/><span><span style="background-color: #ffff99;">題目四:</span><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/6725cd5b00b860d27a45c231d727f0ae/raw/e4a1f9b2163c998e9e922311fb48e02f11df4f60/w15%25E9%25A1%258C%25E7%259B%25AE%25E5%259B%259B">add_avoid_8</a></span></p>
<p><strong>設計思考：</strong></p>
<p>計算從 <code>init</code> 到 <code>upto</code> 之間的總和，但避開所有包含數字 <code>8</code> 的整數。</p>
<p>將每個數字轉換為字串，判斷是否包含字符 <code>8</code>。如果包含，就跳過該數字。</p>
<p><strong>執行過程：</strong></p>
<ul>
<li>
<pre><strong>定義 <code>add_avoid_8</code> 函式</strong>：</pre>
<ol>
<li>
<pre>初始化 <code>sum = 0</code>，用來儲存總和。</pre>
</li>
<li>
<pre>遍歷範圍內的數字，將數字轉換為字串並檢查是否包含字符 <code>'8'</code>。</pre>
</li>
<li>
<pre>若不包含 <code>8</code>，則進行累加。</pre>
</li>
<li>
<pre>返回累加後的結果。</pre>
</li>
</ol>
</li>
<li>
<pre><strong>呼叫 <code>add_avoid_8</code> 並輸出結果</strong>：</pre>
<ol>
<li>
<pre>設定 <code>init = 1</code> 和 <code>upto = 100</code>。</pre>
</li>
<li>
<pre>呼叫 <code>add_avoid_8(init, upto)</code> 函式，並顯示結果。</pre>
</li>
</ol>
</li>
</ul>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義 add_avoid_8 函式
def add_avoid_8(init, upto):
sum = 0
for i in range(init, upto + 1):
if '8' not in str(i): # 判斷數字中是否包含 "8"
sum = sum + i
return sum

# 呼叫函式 add_avoid_8 並輸出結果
init = 1
upto = 100
result = add_avoid_8(init, upto)
print("從" + str(init) + "累加到" + str(upto) + "，避開包含 '8' 的數字，總和為=" + str(result))</pre>
<p><strong>程式碼解釋：</strong></p>
<ul>
<li>
<pre><code>if '8' not in str(i)</code>：將 <code>i</code> 轉換為字串，並檢查字串中是否包含字符 <code>'8'</code>。如果不包含，則進行累加。</pre>
</li>
<li>
<pre>其他部分與 <code>addto</code> 函式類似。</pre>
</li>
</ul>
<p><strong>心得：</strong></p>
<ul>
<li>使用字串方法判斷是否包含 <code>8</code>，這種方式簡單且有效，適用於這類過濾問題。</li>
</ul>
<p><span><span style="background-color: #ffff99;">題目五:</span><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/058a41e9e78338d63bee15e7f3597488/raw/8de5eb1d3006c26de037a529253d0abf0e95030c/w15%25E9%25A1%258C%25E7%259B%25AE%25E4%25BA%2594">add_avoid_8_and_3 </a></span><br/><br/></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
<!DOCTYPE html>
<html>
<head>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3.11.0/brython.min.js">
</script>
<!-- 畫布容器 --></p>
<div id="brython_div1"><!-- 導入 brython 程式庫 -->
<p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

canvas = html.CANVAS(width = 500, height = 300)
brython_div = doc["brython_div1"]
brython_div <= canvas
from browser import html
from browser import document as doc

ctx = canvas.getContext("2d")

ctx.lineWidth = 2
ctx.strokeStyle = "black"

# Draw X-axis line
ctx.beginPath()
ctx.moveTo(31, 1)
ctx.lineTo(88, 1)
ctx.stroke()

# Draw Y-axis line
ctx.beginPath()
ctx.moveTo(31, 1)
ctx.lineTo(31, 95)
ctx.stroke()

# Set font and fill style for text
ctx.font = "20px Arial"  # Set font
ctx.fillStyle = "black"  # Set text color

# Add "+X" label at (90, 25)
ctx.fillText("+X", 90, 25)

# Add "+Y" label at (20, 110)
ctx.fillText("+Y", 20, 110)

# Set font and fill style for the origin label
ctx.font = "12px Arial"
ctx.fillText("(31, 1)", 20, 20)  # Mark the origin coordinates

# Set offset to (31, 1)
x = 31
y = 1

# Draw orange hexagon
ctx.beginPath()
ctx.fillStyle = "#EBB000"
ctx.moveTo(x + 40, y + 70)
ctx.lineTo(x + 60, y + 40)
ctx.lineTo(x + 90, y + 40)
ctx.lineTo(x + 110, y + 70)
ctx.lineTo(x + 90, y + 100)
ctx.lineTo(x + 60, y + 100)
ctx.closePath()
ctx.fill()

# Draw green diamond
ctx.beginPath()
ctx.fillStyle = "#2CB05F"
ctx.moveTo(x + 130, y + 70)
ctx.lineTo(x + 150, y + 40)
ctx.lineTo(x + 170, y + 70)
ctx.lineTo(x + 150, y + 100)
ctx.closePath()
ctx.fill()

# Draw blue triangle (vertex on the right side of the diamond, facing down)
ctx.beginPath()
ctx.fillStyle = "#73B7FF"
ctx.moveTo(x + 174, y + 70)  # Vertex on the right side of the diamond
ctx.lineTo(x + 154, y + 100)  # Left bottom corner
ctx.lineTo(x + 194, y + 100)  # Right bottom corner
ctx.closePath()
ctx.fill()

# Draw pink circle
ctx.beginPath()
ctx.fillStyle = "#FF458C"
ctx.arc(x + 220, y + 70, 20, 0, 2 * 3.14159)
ctx.fill()

# Draw yellow square
ctx.beginPath()
ctx.fillStyle = "#EBDF00"
ctx.rect(x + 260, y + 43, 40, 40)
ctx.fill()

# Draw blue rectangle
ctx.beginPath()
ctx.fillStyle = "#004A99"
ctx.rect(x + 320, y + 53, 60, 20)
ctx.fill()
</script>
</p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><span>以</span><span>自己的學號最後四碼</span><span>作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/07e016b805f53e26a155e7fc3c60a77b/raw/24fdbc0a96f8b7f0cdd0d00d70688c28fb69d963/w16_exam1">程式</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# Create canvas and append to the div
canvas = html.CANVAS(width = 2000, height = 2000)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")

# Set line properties
ctx.lineWidth = 2
ctx.strokeStyle = "black"

# Draw X-axis line
ctx.beginPath()
ctx.moveTo(31, 1) # origin at (31, 1)
ctx.lineTo(88, 1) # end point for the X axis
ctx.stroke()

# Draw Y-axis line
ctx.beginPath()
ctx.moveTo(31, 1) # origin at (31, 1)
ctx.lineTo(31, 95) # end point for the Y axis
ctx.stroke()

# Set font for the labels
ctx.font = "20px Arial"
ctx.fillStyle = "black" # Set text color

# Add labels next to the axes
ctx.fillText("+X", 95, 15) # X axis label, placed to the right of the axis
ctx.fillText("+Y", 31, 105) # Y axis label, placed above the axis

# Display origin point coordinates near the origin inside the axes
ctx.font = "12px Arial"
ctx.fillText("(31, 1)", 40, 15) # Label for the origin, inside the axis area

# Shifted origin point
x = 31
y = 1

# Draw orange hexagon
ctx.beginPath()
ctx.fillStyle = "#EBB000"
ctx.moveTo(x + 40, y + 70)
ctx.lineTo(x + 60, y + 40)
ctx.lineTo(x + 90, y + 40)
ctx.lineTo(x + 110, y + 70)
ctx.lineTo(x + 90, y + 100)
ctx.lineTo(x + 60, y + 100)
ctx.closePath()
ctx.fill()

# Draw green diamond
ctx.beginPath()
ctx.fillStyle = "#2CB05F"
ctx.moveTo(x + 130, y + 70)
ctx.lineTo(x + 150, y + 40)
ctx.lineTo(x + 170, y + 70)
ctx.lineTo(x + 150, y + 100)
ctx.closePath()
ctx.fill()

# Draw blue triangle (point on the right side of the diamond, facing downward)
ctx.beginPath()
ctx.fillStyle = "#73B7FF"
ctx.moveTo(x + 174, y + 70) # Vertex on the right side of the diamond
ctx.lineTo(x + 154, y + 100) # Left bottom corner
ctx.lineTo(x + 194, y + 100) # Right bottom corner
ctx.closePath()
ctx.fill()

# Draw pink circle
ctx.beginPath()
ctx.fillStyle = "#FF458C"
ctx.arc(x + 220, y + 70, 20, 0, 2 * 3.14159)
ctx.fill()

# Draw yellow square
ctx.beginPath()
ctx.fillStyle = "#EBDF00"
ctx.rect(x + 260, y + 43, 40, 40)
ctx.fill()

# Draw blue rectangle
ctx.beginPath()
ctx.fillStyle = "#004A99"
ctx.rect(x + 320, y + 53, 60, 20)
ctx.fill()</pre>
<p><br/><br/></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['/static/','./../downloads/py/']});  // 設定Brython並加載指定路徑
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 創建畫布 (canvas)，並設置其大小為 2000x2000 像素
canvas = html.CANVAS(width = 2000, height = 2000)
# 取得 HTML 中 id 為 brython_div1 的元素，這樣可以把畫布放置到這個元素中
brython_div = doc["brython_div1"]
# 將畫布添加到 HTML 頁面中的指定元素中
brython_div <= canvas

# 取得畫布的 2D 繪圖上下文，這樣我們才能在畫布上繪製圖形
ctx = canvas.getContext("2d")

# 設置畫筆的寬度為 2 像素，這樣我們畫的線會較粗
ctx.lineWidth = 2
# 設置畫筆的顏色為黑色
ctx.strokeStyle = "black"

# 繪製 X 軸 (從原點 (31, 1) 向右延伸到 (88, 3))
ctx.beginPath()  # 開始繪製新的路徑
ctx.moveTo(31, 1)  # 移動畫筆到原點座標 (31, 1)
ctx.lineTo(88, 3)  # 畫一條線到座標 (88, 3)
ctx.stroke()  # 完成繪製並顯示這條線

# 繪製 Y 軸 (從原點 (31, 1) 向下延伸到 (31, 95))
ctx.beginPath()  # 開始繪製新的路徑
ctx.moveTo(31, 1)  # 移動畫筆到原點座標 (31, 1)
ctx.lineTo(31, 95)  # 畫一條線到座標 (31, 95)
ctx.stroke()  # 完成繪製並顯示這條線

# 設置字體樣式為 20px 的 Arial 字型，並設置文字顏色為黑色
ctx.font = "20px Arial"
ctx.fillStyle = "black"

# 在畫布上 (90, 25) 位置添加文字 "+X"，表示 X 軸的正方向
ctx.fillText("+X", 90, 25)

# 在畫布上 (20, 110) 位置添加文字 "+Y"，表示 Y 軸的正方向
ctx.fillText("+Y", 20, 110)

# 更改字體樣式為 12px 的 Arial 字型，用來標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
# 在 (35, 20) 位置顯示文字 "(31, 1)"，這是原點的座標，並偏移 X 軸位置來避免與 Y 軸重疊
ctx.fillText("(31, 1)", 35, 20)

# 設置位移偏移量，x 和 y 變數對應原點座標 (31, 1)
x = 31
y = 1

# 繪製橙色六邊形，所有的座標都是基於原點 (31, 1) 計算的
ctx.beginPath()  # 開始繪製六邊形
ctx.fillStyle = "#EBB000"  # 設置填充顏色為橙色
# 設置六邊形的六個頂點位置，基於 (x, y) 原點進行偏移
ctx.moveTo(x + 40, y + 70)  # 六邊形的第一個頂點
ctx.lineTo(x + 60, y + 40)  # 第二個頂點
ctx.lineTo(x + 90, y + 40)  # 第三個頂點
ctx.lineTo(x + 110, y + 70)  # 第四個頂點
ctx.lineTo(x + 90, y + 100)  # 第五個頂點
ctx.lineTo(x + 60, y + 100)  # 第六個頂點
ctx.closePath()  # 關閉路徑，使六邊形封閉
ctx.fill()  # 填充六邊形的顏色

# 繪製綠色菱形
ctx.beginPath()  # 開始繪製菱形
ctx.fillStyle = "#2CB05F"  # 設置填充顏色為綠色
# 設置菱形的四個頂點位置
ctx.moveTo(x + 130, y + 70)  # 菱形的第一個頂點
ctx.lineTo(x + 150, y + 40)  # 第二個頂點
ctx.lineTo(x + 170, y + 70)  # 第三個頂點
ctx.lineTo(x + 150, y + 100)  # 第四個頂點
ctx.closePath()  # 關閉路徑，將菱形閉合
ctx.fill()  # 填充菱形

# 繪製藍色三角形 (頂點在菱形的右側，並朝下)
ctx.beginPath()  # 開始繪製三角形
ctx.fillStyle = "#73B7FF"  # 設置填充顏色為藍色
# 設置三角形的三個頂點位置
ctx.moveTo(x + 174, y + 70)  # 頂點在菱形右側
ctx.lineTo(x + 154, y + 100)  # 左下角
ctx.lineTo(x + 194, y + 100)  # 右下角
ctx.closePath()  # 關閉路徑，將三角形閉合
ctx.fill()  # 填充三角形

# 繪製粉紅色圓形
ctx.beginPath()  # 開始繪製圓形
ctx.fillStyle = "#FF458C"  # 設置填充顏色為粉紅色
# 設置圓形的圓心座標為 (x + 220, y + 70)，半徑為 20
ctx.arc(x + 220, y + 70, 20, 0, 2 * 3.14159)  # 畫圓
ctx.fill()  # 填充圓形

# 繪製黃色正方形
ctx.beginPath()  # 開始繪製正方形
ctx.fillStyle = "#EBDF00"  # 設置填充顏色為黃色
# 設置正方形的位置和大小，左上角為 (x + 260, y + 43)，大小為 40x40
ctx.rect(x + 260, y + 43, 40, 40)  # 畫正方形
ctx.fill()  # 填充正方形

# 繪製藍色矩形
ctx.beginPath()  # 開始繪製矩形
ctx.fillStyle = "#004A99"  # 設置填充顏色為藍色
# 設置矩形的位置和大小，左上角為 (x + 320, y + 53)，大小為 60x20
ctx.rect(x + 320, y + 53, 60, 20)  # 畫矩形
ctx.fill()  # 填充矩形
</script>
</p>
<h3>w16_exam2</h3>
<p><span>請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/98f86d83732605a3675afd13f6e8e1f1/raw/356bb1473d6a68e9e2d08e4d6e045a4b4d7cc10b/w16_exam2">程式</a></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['/static/','./../downloads/py/']});  // 設定Brython並加載指定路徑
}
</script>
</p>
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=300, height=300) # 設定迷宮畫布大小
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (31, 1)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 1)", 35, 14)

# 定義黑色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2

# 開始繪製迷宮 (座標偏移以 (31, 1) 為起點)
offset_x = 31
offset_y = 1

# 繪製迷宮線條
ctx.beginPath()
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 86, offset_y + 0)
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 0, offset_y + 200)
ctx.moveTo(offset_x + 120, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 0)
ctx.moveTo(offset_x + 200, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 200)
ctx.lineTo(offset_x + 120, offset_y + 200)
ctx.moveTo(offset_x + 200, offset_y + 200)
ctx.moveTo(offset_x + 0, offset_y + 200)
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157)
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157)
ctx.lineTo(offset_x + 126, offset_y + 157)
ctx.moveTo(offset_x + 160, offset_y + 120)
ctx.lineTo(offset_x + 160, offset_y + 200)
ctx.moveTo(offset_x + 160, offset_y + 120)
ctx.lineTo(offset_x + 50, offset_y + 120)
ctx.moveTo(offset_x + 50, offset_y + 120)
ctx.lineTo(offset_x + 50, offset_y + 163)
ctx.moveTo(offset_x + 126, offset_y + 80)
ctx.lineTo(offset_x + 126, offset_y + 120)
ctx.moveTo(offset_x + 0, offset_y + 80)
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 86, offset_y + 40)
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 40, offset_y + 40)
ctx.lineTo(offset_x + 160, offset_y + 40)
ctx.moveTo(offset_x + 160, offset_y + 40)
ctx.lineTo(offset_x + 160, offset_y + 83)
ctx.stroke()</pre>
</div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=300, height=300)  # 設定迷宮畫布大小
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (31, 1)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 1)", 35, 14)

# 定義黑色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2

# 開始繪製迷宮 (座標偏移以 (31, 1) 為起點)
offset_x = 31
offset_y = 1

# 繪製迷宮線條
ctx.beginPath()
ctx.moveTo(offset_x + 0, offset_y + 0) 
ctx.lineTo(offset_x + 86, offset_y + 0)
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 0, offset_y + 200)
ctx.moveTo(offset_x + 120, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 0)
ctx.moveTo(offset_x + 200, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 200)
ctx.lineTo(offset_x + 120, offset_y + 200)
ctx.moveTo(offset_x + 200, offset_y + 200)
ctx.moveTo(offset_x + 0, offset_y + 200) 
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157) 
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157) 
ctx.lineTo(offset_x + 126, offset_y + 157)
ctx.moveTo(offset_x + 160, offset_y + 120) 
ctx.lineTo(offset_x + 160, offset_y + 200)
ctx.moveTo(offset_x + 160, offset_y + 120) 
ctx.lineTo(offset_x + 50, offset_y + 120)
ctx.moveTo(offset_x + 50, offset_y + 120) 
ctx.lineTo(offset_x + 50, offset_y + 163)
ctx.moveTo(offset_x + 126, offset_y + 80) 
ctx.lineTo(offset_x + 126, offset_y + 120)
ctx.moveTo(offset_x + 0, offset_y + 80) 
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 86, offset_y + 40) 
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 40, offset_y + 40) 
ctx.lineTo(offset_x + 160, offset_y + 40)
ctx.moveTo(offset_x + 160, offset_y + 40) 
ctx.lineTo(offset_x + 160, offset_y + 83)
ctx.stroke()
</script>
</p>
<h3>w16_exam3</h3>
<p><span>請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323101/content/Brython.html?src=https://gist.githubusercontent.com/41323101/98f86d83732605a3675afd13f6e8e1f1/raw/356bb1473d6a68e9e2d08e4d6e045a4b4d7cc10b/w16_exam2">程式</a></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['/static/','./../downloads/py/']});  // 設定Brython並加載指定路徑
}
</script>
</p>
<div id="brython_div1">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=300, height=300) # 設定迷宮畫布大小
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (31, 1)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 1)", 35, 14)

# 定義黑色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2

# 開始繪製迷宮 (座標偏移以 (31, 1) 為起點)
offset_x = 31
offset_y = 1

# 繪製迷宮線條
ctx.beginPath()
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 86, offset_y + 0)
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 0, offset_y + 200)
ctx.moveTo(offset_x + 120, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 0)
ctx.moveTo(offset_x + 200, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 200)
ctx.lineTo(offset_x + 120, offset_y + 200)
ctx.moveTo(offset_x + 200, offset_y + 200)
ctx.moveTo(offset_x + 0, offset_y + 200)
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157)
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157)
ctx.lineTo(offset_x + 126, offset_y + 157)
ctx.moveTo(offset_x + 160, offset_y + 120)
ctx.lineTo(offset_x + 160, offset_y + 200)
ctx.moveTo(offset_x + 160, offset_y + 120)
ctx.lineTo(offset_x + 50, offset_y + 120)
ctx.moveTo(offset_x + 50, offset_y + 120)
ctx.lineTo(offset_x + 50, offset_y + 163)
ctx.moveTo(offset_x + 126, offset_y + 80)
ctx.lineTo(offset_x + 126, offset_y + 120)
ctx.moveTo(offset_x + 0, offset_y + 80)
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 86, offset_y + 40)
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 40, offset_y + 40)
ctx.lineTo(offset_x + 160, offset_y + 40)
ctx.moveTo(offset_x + 160, offset_y + 40)
ctx.lineTo(offset_x + 160, offset_y + 83)
ctx.stroke()</pre>
</div>
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=300, height=300)  # 設定迷宮畫布大小
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (31, 1)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 1)", 35, 14)

# 定義黑色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2

# 開始繪製迷宮 (座標偏移以 (31, 1) 為起點)
offset_x = 31
offset_y = 1

# 繪製迷宮線條
ctx.beginPath()
ctx.moveTo(offset_x + 0, offset_y + 0) 
ctx.lineTo(offset_x + 86, offset_y + 0)
ctx.moveTo(offset_x + 0, offset_y + 0)
ctx.lineTo(offset_x + 0, offset_y + 200)
ctx.moveTo(offset_x + 120, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 0)
ctx.moveTo(offset_x + 200, offset_y + 0)
ctx.lineTo(offset_x + 200, offset_y + 200)
ctx.lineTo(offset_x + 120, offset_y + 200)
ctx.moveTo(offset_x + 200, offset_y + 200)
ctx.moveTo(offset_x + 0, offset_y + 200) 
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157) 
ctx.lineTo(offset_x + 86, offset_y + 200)
ctx.moveTo(offset_x + 86, offset_y + 157) 
ctx.lineTo(offset_x + 126, offset_y + 157)
ctx.moveTo(offset_x + 160, offset_y + 120) 
ctx.lineTo(offset_x + 160, offset_y + 200)
ctx.moveTo(offset_x + 160, offset_y + 120) 
ctx.lineTo(offset_x + 50, offset_y + 120)
ctx.moveTo(offset_x + 50, offset_y + 120) 
ctx.lineTo(offset_x + 50, offset_y + 163)
ctx.moveTo(offset_x + 126, offset_y + 80) 
ctx.lineTo(offset_x + 126, offset_y + 120)
ctx.moveTo(offset_x + 0, offset_y + 80) 
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 86, offset_y + 40) 
ctx.lineTo(offset_x + 86, offset_y + 80)
ctx.moveTo(offset_x + 40, offset_y + 40) 
ctx.lineTo(offset_x + 160, offset_y + 40)
ctx.moveTo(offset_x + 160, offset_y + 40) 
ctx.lineTo(offset_x + 160, offset_y + 83)
ctx.stroke()
</script>
</p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>